---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
---
description: Clear, one-line description of what the rule enforces
globs: path/to/files/*.ext, other/path/**/*
alwaysApply: boolean
---

- **Main Points in Bold**
  - Sub-points with details
  - Examples and explanations

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

- **Error Prevention & Self-Review:**
  - **Before Responding:** Re-read the user's actual request, not what you think they asked
  - **Context Awareness:** Check previous conversation for patterns of repeated mistakes
  - **Implementation Review:** After suggesting code changes, verify:
    - The changes match the exact requirements
    - No unintended side effects or breaking changes
    - Previous feedback has been incorporated
  - **Common Pitfalls to Double-Check:**
    - File paths and variable names are exactly as specified
    - API endpoints and message formats match documentation
    - State management follows established patterns
    - Error handling is comprehensive and consistent
  - **Self-Verification Questions:**
    - "Did I address the exact issue the user described?"
    - "Am I repeating a mistake that was previously corrected?"
    - "Have I checked this solution against the existing codebase?"
    - "Is this consistent with the project's established patterns?"

- **Required Rule Structure:**
  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations

  - **File References:**
    - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
    - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
    - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

  - **Code Examples:**
    - Use language-specific code blocks
    ```typescript
    // ✅ DO: Show good examples
    const goodExample = true;
    
    // ❌ DON'T: Show anti-patterns
    const badExample = false;
    ```

  - **Rule Content Guidelines:**
    - Start with high-level overview
    - Include specific, actionable requirements
    - Show examples of correct implementation
    - Reference existing code when possible
    - Keep rules DRY by referencing other rules

  - **Rule Maintenance:**
    - Update rules when new patterns emerge
    - Add examples from actual codebase
    - Remove outdated patterns
    - Cross-reference related rules

  - **Best Practices:**
    - Use bullet points for clarity
    - Keep descriptions concise
    - Include both DO and DON'T examples
    - Reference actual code over theoretical examples
    - Use consistent formatting across rules

  - **Error Prevention & Self-Review:**
    - **Before Responding:** Re-read the user's actual request, not what you think they asked
    - **Context Awareness:** Check previous conversation for patterns of repeated mistakes
    - **Implementation Review:** After suggesting code changes, verify:
      - The changes match the exact requirements
      - No unintended side effects or breaking changes
      - Previous feedback has been incorporated
    - **Common Pitfalls to Double-Check:**
      - File paths and variable names are exactly as specified
      - API endpoints and message formats match documentation
      - State management follows established patterns
      - Error handling is comprehensive and consistent
    - **Self-Verification Questions:**
      - "Did I address the exact issue the user described?"
      - "Am I repeating a mistake that was previously corrected?"
      - "Have I checked this solution against the existing codebase?"
      - "Is this consistent with the project's established patterns?" 